Short-Circuit Evaluation
C uses short-circuit evaluation for logical AND (&&) and logical OR (||) operators. This means that the second operand is only evaluated if necessary.

For &&, if the first operand is false, the entire expression is false, so the second operand is not evaluated.
For ||, if the first operand is true, the entire expression is true, so the second operand is not evaluated.


#include <stdio.h>
int main() {
  int x = 5;
  int y = 0;
  // Example 1: Short-circuit evaluation with &&
  if (y != 0 && x / y > 1) {
    printf("This will not be printed, and no division by zero error will occur.\n");
  }
  // Example 2: Short-circuit evaluation with ||
  if (y == 0 || x / y > 1) {
    printf("The first condition is true, so the second is not evaluated.\n"); // This will be printed
  }
  return 0;
}




The else if statement extends the functionality of the if and else statements by allowing you to check multiple conditions in a sequence. It provides a way to execute different blocks of code based on which condition evaluates to true.


if (condition1) {
  // Code to execute if condition1 is true
} else if (condition2) {
  // Code to execute if condition1 is false AND condition2 is true
} else if (condition3) {
  // Code to execute if condition1 and condition2 are false AND condition3 is true
} else {
  // Code to execute if all conditions are false
}