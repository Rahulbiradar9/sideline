Short-Circuit Evaluation
C uses short-circuit evaluation for logical AND (&&) and logical OR (||) operators. This means that the second operand is only evaluated if necessary.

For &&, if the first operand is false, the entire expression is false, so the second operand is not evaluated.
For ||, if the first operand is true, the entire expression is true, so the second operand is not evaluated.


#include <stdio.h>
int main() {
  int x = 5;
  int y = 0;
  // Example 1: Short-circuit evaluation with &&
  if (y != 0 && x / y > 1) {
    printf("This will not be printed, and no division by zero error will occur.\n");
  }
  // Example 2: Short-circuit evaluation with ||
  if (y == 0 || x / y > 1) {
    printf("The first condition is true, so the second is not evaluated.\n"); // This will be printed
  }
  return 0;
}




The else if statement extends the functionality of the if and else statements by allowing you to check multiple conditions in a sequence. It provides a way to execute different blocks of code based on which condition evaluates to true.


if (condition1) {
  // Code to execute if condition1 is true
} else if (condition2) {
  // Code to execute if condition1 is false AND condition2 is true
} else if (condition3) {
  // Code to execute if condition1 and condition2 are false AND condition3 is true
} else {
  // Code to execute if all conditions are false
}




Why the difference matters:

Efficiency: With else if, once a condition is met, no further conditions in that chain are checked, which can save computational resources, especially with many conditions or complex expressions. Independent if statements will always evaluate every condition.
Logical Correctness: For scenarios where only one outcome is desired from a set of choices (e.g., a student can only get one letter grade), if-else if-else ensures this logical constraint. Independent if statements can lead to multiple actions being taken simultaneously, which might be incorrect for your program's logic.
Readability: if-else if-else clearly expresses the idea of "either this, or that, or this other thing," making the code easier to understand and maintain for mutually exclusive choices.


// Good indentation
if (condition1) {
    // code block 1
} else if (condition2) {
    // code block 2
    if (sub_condition) { // Nested if statement
        // nested code
    }
} else {
    // code block 3
}
// Bad indentation (hard to read)
if (condition1) {
// code block 1
}
else if (condition2) {
// code block 2
}
else {
// code block 3
}


nested if 


if (outer_condition_is_true) {
    // Code to execute if outer_condition is true
    if (inner_condition_is_true) {
        // Code to execute if BOTH outer_condition AND inner_condition are true
    }
}

if (condition_A) {
    // Code if condition_A is true
} else {
    // Code if condition_A is false
    // Now, check another condition specifically if A was false
    if (condition_B) {
        // Code if condition_A is false AND condition_B is true
    } else {
        // Code if condition_A is false AND condition_B is false
    }
}

